{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook) {\n    // Get the source worksheet where the image is located\n    const sourceSheet = workbook.getWorksheet(\"PF-02\");\n    // Get the image as a base64-encoded string\n    const image = sourceSheet.getShapes()[0].getImageAsBase64(undefined);\n    // Get the position and size of the image\n    const sourceImage = sourceSheet.getShapes()[0];\n    const left = sourceImage.getLeft();\n    const top = sourceImage.getTop();\n    const width = sourceImage.getWidth();\n    const height = sourceImage.getHeight();\n\n    // Define a range that approximately corresponds to the image's position and size\n    // Adjust the cell references as needed to match the image's coverage\n    const imageRangeAddress = `G1:I1`;\n\n    // Iterate over all worksheets\n    workbook.getWorksheets().forEach(worksheet => {\n        // Skip the source worksheet\n        if (worksheet.getName() !== sourceSheet.getName()) {\n            // Clear any existing images in the target range\n            worksheet.getShapes().forEach(shape => {\n                const shapeLeft = shape.getLeft();\n                const shapeTop = shape.getTop();\n                const shapeRight = shapeLeft + shape.getWidth();\n                const shapeBottom = shapeTop + shape.getHeight();\n\n                // Check if the shape overlaps with the defined range for the image\n                // This is a simple check and may need to be adjusted based on the actual size and position of your images\n                if (shapeLeft < (left + width) && shapeRight > left && shapeTop < (top + height) && shapeBottom > top) {\n                    shape.delete();\n                }\n            });\n\n            // Add the image to the current worksheet\n            const addedImage = worksheet.addImage(image);\n            // Set the position and size of the image\n            addedImage.setLeft(left);\n            addedImage.setTop(top);\n            addedImage.setWidth(width);\n            addedImage.setHeight(height);\n        }\n    });\n}\n","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}